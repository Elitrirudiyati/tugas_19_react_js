{"version":3,"sources":["Component/PageModal.js","Component/Body.js","App.js","serviceWorker.js","index.js"],"names":["ModalPage","props","Modal","size","centered","show","modalShow","onHide","setModalShow","Header","Title","Body","Form","Control","value","dataState","inputNama","onChange","e","handleInput","type","placeholder","inputJabatan","style","marginTop","marginBottom","inputJk","as","defaultValue","inputTl","Footer","Button","variant","onClick","closeModal","handleSave","state","dataTabel","valueSearch","inputJkelamin","inputTanggal","inputId","handleEdit","bind","clearInput","handleDel","search","tampilData","this","setState","target","inputKelamin","id","fetch","then","response","json","hasil","nama_karyawan","jabatan","jenis_kelamin","tanggal_lahir","alert","method","body","JSON","stringify","headers","result","console","log","Navbar","bg","Brand","color","inline","FormControl","marginLeft","width","className","Container","Row","Table","striped","bordered","hover","textAlign","fontWeight","fontSize","reverse","filter","valueFilter","toLowerCase","includes","map","index","key","margin","Component","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39fc676e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\n\r\nfunction ModalPage(props){\r\n\r\n\treturn(\r\n\t\t<Modal size=\"lg\" centered show={props.modalShow} onHide={()=>props.setModalShow(true)} >\r\n\t\t\t<Modal.Header>\r\n\t\t\t\t<Modal.Title>Data Karyawan</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<Form.Control value={props.dataState.inputNama}  onChange={(e)=> props.handleInput('inputNama', e)}  type=\"text\" placeholder=\"Masukkan Nama\" />\r\n\t\t\t\t<Form.Control value={props.dataState.inputJabatan} onChange={(e)=> props.handleInput('inputJabatan', e)} style={{marginTop: '10px', marginBottom: '10px'}} type=\"text\" placeholder=\"Masukkan Jabatan\" />\r\n\t\t\t\t<Form.Control value={props.dataState.inputJk}  onChange={(e)=> props.handleInput('inputJk', e)} as=\"select\" defaultValue=\"Pilih...\">\r\n\t\t\t\t\t<option value= \"\">Pilih Jenis Kelamin</option>\r\n\t\t\t\t\t<option value= \"Laki-Laki\">Laki-Laki</option>\r\n        \t\t\t<option value= \"Perempuan\">Perempuan</option>\r\n\t\t\t\t </Form.Control>\r\n\t\t\t\t<Form.Control value={props.dataState.inputTl}  onChange={(e)=> props.handleInput('inputTl', e)} style={{marginTop: '10px'}} type=\"date\" />\r\n\t\t\t</Modal.Body>\r\n\t\t\t<Modal.Footer>\r\n\t\t\t\t<Button variant=\"secondary\" onClick={()=>props.closeModal()} >Close</Button>\r\n\t\t\t\t<Button variant=\"success\" onClick={()=>props.handleSave()} >Simpan</Button>\r\n\t\t\t</Modal.Footer>\r\n\t\t</Modal>\r\n\r\n\t)\r\n}\r\n\r\nexport default ModalPage;","\r\nimport React, {Component} from 'react';\r\nimport ModalPage from './PageModal';\r\nimport { Container, Row, Button, Form, Table, Navbar, FormControl} from 'react-bootstrap';\r\n\r\nclass Body extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            dataTabel:[],\r\n            valueSearch:'',\r\n            inputNama:'',\r\n            inputJabatan:'',\r\n            inputJkelamin:'',\r\n            inputTanggal:'',\r\n            inputId:''\r\n        }\r\n        this.handleEdit=this.handleEdit.bind(this)\r\n        this.handleSave=this.handleSave.bind(this)\r\n        this.handleInput=this.handleInput.bind(this)\r\n        this.closeModal=this.closeModal.bind(this)\r\n        this.clearInput=this.clearInput.bind(this)\r\n        this.handleDel=this.handleDel.bind(this)\r\n        this.search=this.search.bind(this)        \r\n        this.tampilData=this.tampilData.bind(this)\r\n    }\r\n\r\n    handleInput(value, e){\r\n        this.setState({[value]: e.target.value})\r\n    }\r\n\r\n    closeModal(){\r\n        this.props.setModalShow(false)\r\n        this.clearInput()\r\n    }\r\n\r\n    clearInput(){\r\n        this.setState(\r\n            {\r\n            inputNama:'',\r\n            inputJabatan:'',\r\n            inputKelamin:'',\r\n            inputTanggal:'',\r\n            inputId:'' \r\n            }\r\n        )\r\n    }\r\n\r\n    handleEdit(id){\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`)\r\n            .then((response)=>response.json())\r\n            .then((hasil)=>{\r\n                this.props.setModalShow(true)\r\n                this.setState(\r\n                    {\r\n                        inputNama:hasil.nama_karyawan,\r\n                        inputJabatan:hasil.jabatan,\r\n                        inputKelamin:hasil.jenis_kelamin,\r\n                        inputTanggal:hasil.tanggal_lahir,\r\n                        inputId:hasil.id\r\n                    }\r\n                )\r\n            })\r\n    }\r\n\r\n    handleSave(){\r\n        if(this.state.inputNama === '' || this.state.inputJabatan === '' || \r\n        this.state.inputKelamin === '' || this.state.inputTanggal === ''){\r\n            alert('Silahkan Isi Data')\r\n        } else if(this.state.inputId === ''){\r\n            fetch('http://localhost:3000/data-karyawan',{\r\n                method:'POST',\r\n                body:JSON.stringify({\r\n                    nama_karyawan:this.state.inputNama,\r\n                    jabatan:this.state.inputJabatan,\r\n                    jenis_kelamin:this.state.inputKelamin,\r\n                    tanggal_lahir:this.state.inputTanggal\r\n                }),\r\n                headers:{\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                }\r\n            })\r\n            .then ((response)=>response.json())\r\n            .then ((result)=>{\r\n                console.log(result)\r\n                this.closeModal()\r\n                this.tampilData()\r\n            })\r\n        } else{\r\n            fetch(`http://localhost:3000/data-karyawan/${this.state.inputId}`,{\r\n                method:'PUT',\r\n                body:JSON.stringify({\r\n                    nama_karyawan:this.state.inputNama,\r\n                    jabatan:this.state.inputJabatan,\r\n                    jenis_kelamin:this.state.inputKelamin,\r\n                    tanggal_lahir:this.state.inputTanggal\r\n                }),\r\n                headers:{\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                }\r\n            })\r\n            .then ((response)=>response.json())\r\n            .then ((hasil)=>{\r\n                this.tampilData()\r\n                this.props.setModalShow(false)\r\n                this.clearInput()\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    handleDel(id){\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`,{\r\n            method:'DELETE',\r\n        })\r\n        .then((response)=>{\r\n            alert('Data Terhapus')\r\n            this.tampilData()\r\n        })\r\n    }\r\n\r\n    search(e){\r\n        this.setState({valueSearch: e.target.value})\r\n    }\r\n\r\n    tampilData(){\r\n        fetch('http://localhost:3000/data-karyawan')\r\n            .then((response)=>response.json())\r\n            .then((hasil)=>this.setState({dataTabel:hasil}))\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.tampilData()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Navbar bg=\"secondary\">\r\n                    <Navbar.Brand style={{color:'white'}}><h2> <b>DATA KARYAWAN</b></h2></Navbar.Brand>\r\n                        </Navbar>     \r\n\r\n                    \r\n                    <Form inline>                 \r\n                        <FormControl style={{marginLeft:'500px', width:'500px'}} type=\"text\" \r\n                            placeholder=\"Masukan Nama Karyawan\" className=\"mr-sm-2\" \r\n                            value={this.state.valueSearch} onChange={(e)=>this.search(e)}/>                                                                              \r\n                        <Button onClick={()=>this.props.setModalShow(true)} \r\n                        variant=\"info\">Tambah Data</Button>                                        \r\n                    </Form>\r\n                                       \r\n                    <Container>\r\n                    <ModalPage modalShow={this.props.modalShow} \r\n                            setModalShow={this.props.setModalShow} \r\n                            closeModal={this.closeModal} \r\n                            handleInput={this.handleInput} \r\n                            dataState={this.state} \r\n                            handleSave={this.handleSave} \r\n                            handleEdit={this.handleEdit}/>\r\n                    <Row>\r\n                        <Table striped bordered hover style={{marginTop:'40px', textAlign:'center'}} >\r\n                            <thead style={{fontWeight:'bolder', fontSize:'14px'}}>\r\n                                <tr>\r\n                                    <td>NO</td>\r\n                                    <td>ID</td>\r\n                                    <td>NAMA</td>\r\n                                    <td>JABATAN</td>\r\n                                    <td>JENIS KELAMIN</td>\r\n                                    <td>TANGGAL LAHIR</td>\r\n                                    <td></td>                               \r\n                                </tr>\r\n                            </thead>\r\n                    <tbody >\r\n                        {this.state.dataTabel.reverse().filter(valueFilter=>valueFilter.nama_karyawan.toLowerCase().includes(this.state.valueSearch)).map((value, index)=>{\r\n                            return(\r\n                                    <tr key={index}>\r\n                                            <td>{index+1}</td>\r\n                                            <td>{value.id}</td>\r\n                                            <td>{value.nama_karyawan}</td>\r\n                                            <td>{value.jabatan}</td>\r\n                                            <td>{value.jenis_kelamin}</td>\r\n                                            <td>{value.tanggal_lahir}</td>\r\n                                            <td><Button onClick={()=> this.handleDel(value.id)}  \r\n                                                    variant='info' size='sm' style={{margin:'5%'}}>Delete</Button>\r\n                                                <Button onClick={()=>this.handleEdit(value.id)} \r\n                                                    variant='info' size='sm'>Edit</Button></td>\r\n                                    </tr>\r\n                                    )\r\n                                    })\r\n                                }           \r\n                            </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body","import React from 'react';\nimport './css/bootstrap.min.css';\nimport Body from './Component/Body';\n\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false)\n  return (\n    <div className=\"App\"> \n    \n      <Body modalShow={modalShow} setModalShow={setModalShow} />      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}